<?php

namespace App\Http\Controllers;

use App\Http\Requests\{{modelName}}\Index{{modelName}}Request;
use App\Http\Requests\{{modelName}}\Store{{modelName}}Request;
use App\Http\Requests\{{modelName}}\Update{{modelName}}Request;
use App\Models\{{modelName}};
use Illuminate\Http\Request;
use Inertia\Inertia;

class {{modelName}}Controller extends Controller
{
    public function __construct()
    {
        $this->middleware('permission:{{modelNameLowerCase}} create', ['only' => ['create', 'store']]);
        $this->middleware('permission:{{modelNameLowerCase}} read', ['only' => ['index', 'show']]);
        $this->middleware('permission:{{modelNameLowerCase}} update', ['only' => ['edit', 'update']]);
        $this->middleware('permission:{{modelNameLowerCase}} delete', ['only' => ['destroy', 'destroyBulk']]);
    }
    /**
     * Display a listing of the resource.
     */
    public function index(Index{{modelName}}Request $request)
    {
        ${{modelNamePluralLowerCase}} = {{modelName}}::query();
        if ($request->has('search')) {
            ${{modelNamePluralLowerCase}}->where('name', 'LIKE', "%" . $request->search . "%");
        }
        if ($request->has(['field', 'order'])) {
            ${{modelNamePluralLowerCase}}->orderBy($request->field, $request->order);
        }
        $perPage = $request->has('perPage') ? $request->perPage : 10;
        return Inertia::render('{{modelName}}/Index', [
            'title'         => "{{modelName}}",
            'filters'       => $request->all(['search', 'field', 'order']),
            'perPage'       => (int) $perPage,
            '{{modelNamePluralLowerCase}}'   => ${{modelNamePluralLowerCase}}->with('user')->paginate($perPage)->onEachSide(0),
            'breadcrumbs'   => [['label' => "{{modelName}}", 'href' => route('{{modelNamePluralLowerCase}}.index')]],
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Store{{modelName}}Request $request)
    {
        try {
            ${{modelNameLowerCase}} = {{modelName}}::create([
                'user_id'   => auth()->user()->id,
                'name'      => $request->name,
            ]);
            return back()->with('success', __('app.label.created_successfully', ['name' => ${{modelNameLowerCase}}->name]));
        } catch (\Throwable $th) {
            return back()->with('error', __('app.label.created_error', ['name' => "{{modelName}}"]) . $th->getMessage());
        }
    }

    /**
     * Display the specified resource.
     */
    public function show({{modelName}} ${{modelNameLowerCase}})
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{modelName}} ${{modelNameLowerCase}})
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Update{{modelName}}Request $request, {{modelName}} ${{modelNameLowerCase}})
    {
        try {
            ${{modelNameLowerCase}}->update([
                'user_id'   => auth()->user()->id,
                'name'      => $request->name,
            ]);
            return back()->with('success', __('app.label.updated_successfully', ['name' => ${{modelNameLowerCase}}->name]));
        } catch (\Throwable $th) {
            return back()->with('error', __('app.label.updated_error', ['name' => ${{modelNameLowerCase}}->name]) . $th->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{modelName}} ${{modelNameLowerCase}})
    {
        try {
            ${{modelNameLowerCase}}->delete();
            return back()->with('success', __('app.label.deleted_successfully', ['name' => ${{modelNameLowerCase}}->name]));
        } catch (\Throwable $th) {
            return back()->with('error', __('app.label.deleted_error', ['name' => ${{modelNameLowerCase}}->name]) . $th->getMessage());
        }
    }

    public function destroyBulk(Request $request)
    {
        try {
            ${{modelNamePluralLowerCase}} = {{modelName}}::whereIn('id', $request->id);
            ${{modelNamePluralLowerCase}}->delete();
            return back()->with('success', __('app.label.deleted_successfully', ['name' => count($request->id) . ' ' . "{{modelName}}"]));
        } catch (\Throwable $th) {
            return back()->with('error', __('app.label.deleted_error', ['name' => count($request->id) . ' ' . "{{modelName}}"]) . $th->getMessage());
        }
    }

    public function trash(Request $request)
    {
        ${{modelNameLowerCase}} = {{modelName}}::onlyTrashed()->get();

        return Inertia::render('{{modelName}}/Trash', [
            'title' => __('app.label.{{modelNameLowerCase}}'),
            '{{modelNameLowerCase}}' => ${{modelNameLowerCase}},
            'breadcrumbs' => [['label' => __('app.label.trash'), 'href' => route('{{modelNamePluralLowerCase}}.index')]],
        ]);
    }

     /**
     * Parmanently delete the specified resource from storage.
     */
    public function destroyForce($user)
    {
        $user = {{modelName}}::where('id', $user)->onlyTrashed()->first();
        $user->forceDelete();

        return back()->with('success', __('app.label.deleted_successfully', ['name' => $user->name]));
    }

    public function destroyForceBulk(Request $request)
    {
        try {
            ${{modelNameLowerCase}} = {{modelName}}::whereIn('id', $request->id)->onlyTrashed();
            ${{modelNameLowerCase}}->forceDelete();

            return back()->with('success', __('app.label.restored_successfully', ['name' => count($request->id).' '.__('app.label.${{modelNameLowerCase}}')]));
        } catch (\Throwable $th) {
            return back()->with('error', __('app.label.restore_error', ['name' => count($request->id).' '.__('app.label.${{modelNameLowerCase}}')]).$th->getMessage());
        }
    }

    public function destroyForceAll()
    {
        try {
            ${{modelNameLowerCase}} = {{modelName}}::onlyTrashed()->get();
            $count = count(${{modelNameLowerCase}});
            ${{modelNameLowerCase}}->each->forceDelete();

            return back()->with('success', __('app.label.deleted_successfully', ['name' => $count.' '.__('app.label.{{modelNameLowerCase}}')]));
        } catch (\Throwable $th) {
            return back()->with('error', __('app.label.deleted_error', ['name' => $count.' '.__('app.label.{{modelNameLowerCase}}')]).$th->getMessage());
        }
    }

    /**
     * Restore the specified resource from storage.
     */
    public function restore(${{modelNameLowerCase}})
    {
        ${{modelNameLowerCase}} = {{modelName}}::where('id', ${{modelNameLowerCase}})->onlyTrashed()->first();
        ${{modelNameLowerCase}}->restore();

        return back()->with('success', __('app.label.restored_successfully', ['name' => ${{modelNameLowerCase}}->name]));
    }

    public function restoreBulk(Request $request)
    {
        try {
            ${{modelNameLowerCase}} = {{modelName}}::whereIn('id', $request->id)->onlyTrashed();
            ${{modelNameLowerCase}}->restore();

            return back()->with('success', __('app.label.restored_successfully', ['name' => count($request->id).' '.__('app.label.${{modelNameLowerCase}}')]));
        } catch (\Throwable $th) {
            return back()->with('error', __('app.label.restore_error', ['name' => count($request->id).' '.__('app.label.${{modelNameLowerCase}}')]).$th->getMessage());
        }
    }

    public function restoreAll()
    {
        try {
            ${{modelNameLowerCase}} = {{modelName}}::onlyTrashed();
            ${{modelNameLowerCase}}->restore();

            return back()->with('success', __('app.label.restored_successfully', [__('app.label.${{modelNameLowerCase}}')]));
        } catch (\Throwable $th) {
            return back()->with('error', __('app.label.restore_error', [__('app.label.${{modelNameLowerCase}}')]).$th->getMessage());
        }
    }
}
